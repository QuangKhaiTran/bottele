import time
import sqlite3
import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
import base64
from cryptography.fernet import Fernet

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# C·∫•u h√¨nh logging
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# Bi·∫øn to√†n c·ª•c
click_count = 0
income_today = 0
last_click_time = 0
last_update_time = 0
target_clicks = 1000
admin_user_id = int(os.getenv("ADMIN_USER_ID"))  # ID c·ªßa admin
bank_account_info = {
    'account_number': '',
    'bank_name': '',
    'phone_number': '',
    'deposited_amount': 0,
    'withdrawn_amount': 0,
}

# Kh√≥a m√£ h√≥a
encryption_key = base64.urlsafe_b64encode(os.urandom(32))
cipher_suite = Fernet(encryption_key)

# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
def connect_db():
    try:
        return sqlite3.connect('user_data.db')
    except sqlite3.Error as e:
        logging.error(f"L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: {e}")
        return None

def init_db():
    with connect_db() as conn:
        if conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    account_number TEXT,
                    bank_name TEXT,
                    phone_number TEXT,
                    deposited_amount REAL,
                    withdrawn_amount REAL,
                    income_today REAL,
                    click_count INTEGER
                )
            ''')
            conn.commit()

def encrypt_data(data: str) -> str:
    return cipher_suite.encrypt(data.encode()).decode()

def decrypt_data(data: str) -> str:
    return cipher_suite.decrypt(data.encode()).decode()

def read_user_data(user_id: int):
    with connect_db() as conn:
        if conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user_data = cursor.fetchone()
            if user_data:
                return {
                    'User ID': user_data[0],
                    'Account Number': decrypt_data(user_data[1]) if user_data[1] else '',
                    'Bank Name': decrypt_data(user_data[2]) if user_data[2] else '',
                    'Phone Number': decrypt_data(user_data[3]) if user_data[3] else '',
                    'Deposited Amount': user_data[4],
                    'Withdrawn Amount': user_data[5],
                    'Income Today': user_data[6],
                    'Click Count': user_data[7]
                }
    return None

def save_user_data(user_id: int):
    with connect_db() as conn:
        if conn:
            cursor = conn.cursor()
            user_data = (
                user_id,
                encrypt_data(bank_account_info['account_number']),
                encrypt_data(bank_account_info['bank_name']),
                encrypt_data(bank_account_info['phone_number']),
                bank_account_info['deposited_amount'],
                bank_account_info['withdrawn_amount'],
                income_today,
                click_count
            )
            try:
                cursor.execute('BEGIN TRANSACTION;')
                cursor.execute('''
                    INSERT INTO users (user_id, account_number, bank_name, phone_number, 
                                       deposited_amount, withdrawn_amount, income_today, click_count)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    ON CONFLICT(user_id) DO UPDATE SET
                        account_number = excluded.account_number,
                        bank_name = excluded.bank_name,
                        phone_number = excluded.phone_number,
                        deposited_amount = excluded.deposited_amount,
                        withdrawn_amount = excluded.withdrawn_amount,
                        income_today = excluded.income_today,
                        click_count = excluded.click_count
                ''', user_data)
                cursor.execute('COMMIT;')
            except Exception as e:
                cursor.execute('ROLLBACK;')
                logging.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu: {e}")

async def send_user_notification(user_chat_id: int, message: str):
    try:
        await application.bot.send_message(chat_id=user_chat_id, text=message)
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn: {e}")
        await application.bot.send_message(chat_id=user_chat_id, text="‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.")

async def notify_admin(user_id: int, user_info: str, action: str, amount: float, user_chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    message = (
        f"üì• Ng∆∞·ªùi d√πng (ID: {user_id}) ƒë√£ {action} ti·ªÅn: {amount} VND\n"
        f"Th√¥ng tin: {user_info}\n"
        f"B·∫°n c√≥ mu·ªën duy·ªát kh√¥ng?"
    )
    context.user_data['pending_transaction'] = {'action': action, 'amount': amount, 'user_chat_id': user_chat_id}
    
    keyboard = [
        [InlineKeyboardButton("Duy·ªát", callback_data='approve_transaction')],
        [InlineKeyboardButton("Kh√¥ng Duy·ªát", callback_data='deny_transaction')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_user_notification(user_chat_id, "üîÑ ƒêang x·ª≠ l√Ω giao d·ªãch...")
    await context.bot.send_message(chat_id=admin_user_id, text=message, reply_markup=reply_markup)

async def approve_transaction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    transaction = context.user_data.get('pending_transaction')
    if not transaction:
        logging.warning("Kh√¥ng c√≥ giao d·ªãch n√†o ƒë·ªÉ ph√™ duy·ªát.")
        return

    user_chat_id = transaction['user_chat_id']
    action = transaction['action']
    amount = transaction['amount']
    
    global bank_account_info
    message = ""

    logging.info(f"Ph√™ duy·ªát giao d·ªãch: {action} {amount} VND t·ª´ ng∆∞·ªùi d√πng {user_chat_id}")

    if action == "n·∫°p":
        bank_account_info['deposited_amount'] += amount
        message = f"‚úÖ Giao d·ªãch n·∫°p ti·ªÅn {amount} VND th√†nh c√¥ng!"
    elif action == "r√∫t":
        total_balance = bank_account_info['deposited_amount'] + (click_count * (bank_account_info['deposited_amount'] * 0.00005))
        if amount <= total_balance:
            bank_account_info['withdrawn_amount'] += amount
            bank_account_info['deposited_amount'] -= amount
            message = f"‚úÖ Giao d·ªãch r√∫t ti·ªÅn {amount} VND th√†nh c√¥ng!"
        else:
            message = f"‚ùå Giao d·ªãch r√∫t ti·ªÅn {amount} VND th·∫•t b·∫°i do s·ªë d∆∞ kh√¥ng ƒë·ªß!"
    elif action == "chuy·ªÉn kho·∫£n":
        recipient_user_id = context.user_data.get('recipient_user_id')
        if recipient_user_id:
            recipient_data = read_user_data(recipient_user_id)
            if recipient_data:
                total_balance = bank_account_info['deposited_amount'] + (click_count * (bank_account_info['deposited_amount'] * 0.00005))
                if amount <= total_balance:
                    bank_account_info['deposited_amount'] -= amount
                    with connect_db() as conn:
                        cursor = conn.cursor()
                        cursor.execute('UPDATE users SET deposited_amount = deposited_amount + ? WHERE user_id = ?', (amount, recipient_user_id))
                        conn.commit()
                    message = f"‚úÖ Giao d·ªãch chuy·ªÉn kho·∫£n {amount} VND ƒë·∫øn ng∆∞·ªùi d√πng (ID: {recipient_user_id}) th√†nh c√¥ng!"
                else:
                    message = f"‚ùå Giao d·ªãch chuy·ªÉn kho·∫£n {amount} VND th·∫•t b·∫°i do s·ªë d∆∞ kh√¥ng ƒë·ªß!"
            else:
                message = "‚ùå Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i."
        else:
            message = "‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi nh·∫≠n."

    await send_user_notification(user_chat_id, message)
    context.user_data['pending_transaction'] = None
    save_user_data(user_chat_id)
    await update.callback_query.answer("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát!")

async def deny_transaction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    transaction = context.user_data.get('pending_transaction')
    if transaction:
        user_chat_id = transaction['user_chat_id']
        action = transaction['action']
        amount = transaction['amount']
        message = f"‚ùå Giao d·ªãch {action} ti·ªÅn {amount} VND ƒë√£ b·ªã t·ª´ ch·ªëi!"
        await send_user_notification(user_chat_id, message)
    context.user_data['pending_transaction'] = None

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.info("L·ªánh /start ƒë√£ ƒë∆∞·ª£c g·ªçi.")

    try:
        user_id = update.message.from_user.id
        user_first_name = update.message.from_user.first_name
        user_last_name = update.message.from_user.last_name
        full_name = f"{user_first_name} {user_last_name}" if user_last_name else user_first_name

        # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
        init_db()

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ d·ªØ li·ªáu trong database ch∆∞a
        user_data = read_user_data(user_id)
        if user_data is None:
            bank_account_info.update({'account_number': '', 'bank_name': '', 'phone_number': ''})
            save_user_data(user_id)
        
        # T·∫°o b√†n ph√≠m menu
        reply_keyboard = [
            ['Click ƒë·ªÉ tƒÉng l√£i su·∫•t'],
            ['N·∫°p ti·ªÅn', 'R√∫t ti·ªÅn'],
            ['Chuy·ªÉn kho·∫£n', 'Ki·ªÉm tra s·ªë d∆∞'],
            ['Th√¥ng tin']
        ]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(f'Ch√†o {full_name}! H√£y ch·ªçn menu üëá', reply_markup=reply_markup)

    except Exception as e:
        logging.error(f"L·ªói trong start_handler: {str(e)}")
        await update.message.reply_text("‚ùå ƒê√£ x·∫£y ra l·ªói! Vui l√≤ng th·ª≠ l·∫°i sau.")

async def big_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global last_click_time

    current_time = time.time()
    if current_time - last_click_time < 1.5:
        await update.message.reply_text("Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi nh·∫•n l·∫°i!")
        return

    last_click_time = current_time
    message = "üìÜ Click ƒë·ªÉ c·∫≠p nh·∫≠t thu nh·∫≠p!"
    keyboard = [[InlineKeyboardButton("C·∫≠p nh·∫≠t thu nh·∫≠p", callback_data='update_income')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(message, reply_markup=reply_markup)

async def update_income_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global income_today, click_count, last_update_time
    current_time = time.time()

    if current_time - last_update_time < 2:
        await update.callback_query.answer("Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi c·∫≠p nh·∫≠t!")
        return

    query = update.callback_query
    await query.answer("ü§ë C·∫≠p nh·∫≠t th√†nh c√¥ng!")

    deposited_amount = bank_account_info['deposited_amount']
    interest_per_click = deposited_amount * 0.00005

    income_today += interest_per_click
    click_count += 1
    last_update_time = current_time

    progress = (click_count / target_clicks) * 100

    message = (
        f"üìÜ S·ªë l·∫ßn nh·∫•n h√¥m nay: {click_count} / {target_clicks}\n"
        f"‚ôªÔ∏è Ti·∫øn ƒë·ªô: {progress:.2f} %\n"
        f"üíµ L√£i su·∫•t c·ªßa 1 l·∫ßn click: {interest_per_click:.2f} VND\n"
        f"üí∞ S·ªë ti·ªÅn ƒë√£ n·∫°p v√†o: {deposited_amount} VND\n"
        f"üí∞ Thu nh·∫≠p h√¥m nay: {income_today:.2f} VND\n"
    )

    await query.edit_message_text(text=message, reply_markup=query.message.reply_markup)

async def deposit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën n·∫°p v√†o:")
    context.user_data['waiting_for_deposit'] = True

async def withdraw_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën r√∫t:")
    context.user_data['waiting_for_withdraw'] = True

async def transfer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi nh·∫≠n:")
    context.user_data['waiting_for_transfer'] = True

async def check_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    deposited_amount = bank_account_info['deposited_amount']
    total_income = click_count * (deposited_amount * 0.00005)
    total_balance = deposited_amount + total_income

    balance_message = (
        f"üí∞ S·ªë ti·ªÅn ƒë√£ n·∫°p v√†o: {deposited_amount} VND\n"
        f"üìà L√£i su·∫•t t·ª´ s·ªë ti·ªÅn ƒë√£ n·∫°p: {total_income:.2f} VND\n"
        f"üíµ T·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng: {total_balance:.2f} VND\n"
        f"üí∞ S·ªë ti·ªÅn ƒë√£ r√∫t: {bank_account_info['withdrawn_amount']} VND"
    )
    await update.message.reply_text(balance_message)

async def show_account_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    account_info_message = (
        "üìã Th√¥ng tin t√†i kho·∫£n:\n"
        f"S·ªë t√†i kho·∫£n: {bank_account_info['account_number'] or 'Ch∆∞a c·∫≠p nh·∫≠t'}\n"
        f"T√™n ng√¢n h√†ng: {bank_account_info['bank_name'] or 'Ch∆∞a c·∫≠p nh·∫≠t'}\n"
        f"S·ªë ƒëi·ªán tho·∫°i: {bank_account_info['phone_number'] or 'Ch∆∞a c·∫≠p nh·∫≠t'}\n"
    )

    keyboard = [
        [InlineKeyboardButton("C·∫≠p nh·∫≠t s·ªë t√†i kho·∫£n", callback_data='update_account_number')],
        [InlineKeyboardButton("C·∫≠p nh·∫≠t t√™n ng√¢n h√†ng", callback_data='update_bank_name')],
        [InlineKeyboardButton("C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i", callback_data='update_phone_number')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(account_info_message, reply_markup=reply_markup)

async def update_account_info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    context.user_data['waiting_for_account_info'] = True
    context.user_data['update_type'] = query.data
    prompt_message = "Vui l√≤ng nh·∫≠p "
    if query.data == 'update_account_number':
        prompt_message += "s·ªë t√†i kho·∫£n m·ªõi:"
    elif query.data == 'update_bank_name':
        prompt_message += "t√™n ng√¢n h√†ng m·ªõi:"
    elif query.data == 'update_phone_number':
        prompt_message += "s·ªë ƒëi·ªán tho·∫°i m·ªõi:"
    
    await query.message.reply_text(prompt_message)

async def reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id  
    user_info = f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()
    user_chat_id = user_id  

    user_choice = update.message.text

    if user_choice == 'Click ƒë·ªÉ tƒÉng l√£i su·∫•t':
        await big_button_handler(update, context)
    elif user_choice == 'N·∫°p ti·ªÅn':
        await deposit_handler(update, context)
    elif user_choice == 'R√∫t ti·ªÅn':
        await withdraw_handler(update, context)
    elif user_choice == 'Chuy·ªÉn kho·∫£n':
        await transfer_handler(update, context)
    elif user_choice == 'Ki·ªÉm tra s·ªë d∆∞':
        await check_balance(update, context)
    elif user_choice == 'Th√¥ng tin':
        await show_account_info(update, context)
    elif context.user_data.get('waiting_for_deposit'):
        try:
            amount = float(update.message.text)
            if amount <= 0:
                await update.message.reply_text("S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n 0.")
                return
            
            await notify_admin(user_id, user_info, "n·∫°p", amount, user_chat_id, context)
        except ValueError:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.")
        finally:
            context.user_data['waiting_for_deposit'] = False
    elif context.user_data.get('waiting_for_withdraw'):
        try:
            amount = float(update.message.text)
            if amount <= 0:
                await update.message.reply_text("S·ªë ti·ªÅn r√∫t ph·∫£i l·ªõn h∆°n 0.")
                return
            
            deposited_amount = bank_account_info['deposited_amount']
            total_income = click_count * (deposited_amount * 0.00005)
            total_balance = deposited_amount + total_income
            
            if amount > total_balance:
                await update.message.reply_text("S·ªë ti·ªÅn r√∫t kh√¥ng th·ªÉ l·ªõn h∆°n t·ªïng s·ªë d∆∞ kh·∫£ d·ª•ng.")
                return
            
            await notify_admin(user_id, user_info, "r√∫t", amount, user_chat_id, context)
        except ValueError:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.")
        finally:
            context.user_data['waiting_for_withdraw'] = False
    elif context.user_data.get('waiting_for_transfer'):
        try:
            recipient_user_id = int(update.message.text)
            context.user_data['recipient_user_id'] = recipient_user_id
            
            recipient_data = read_user_data(recipient_user_id)
            if recipient_data:
                recipient_info_message = (
                    "üßæ Th√¥ng tin ng∆∞·ªùi nh·∫≠n:\n"
                    f"ID: {recipient_user_id}\n"
                    f"S·ªë t√†i kho·∫£n: {recipient_data['Account Number']}\n"
                    f"T√™n ng√¢n h√†ng: {recipient_data['Bank Name']}\n"
                    f"S·ªë ƒëi·ªán tho·∫°i: {recipient_data['Phone Number']}\n"
                    f"S·ªë ti·ªÅn ƒë√£ n·∫°p: {recipient_data['Deposited Amount']} VND\n"
                    f"S·ªë ti·ªÅn ƒë√£ r√∫t: {recipient_data['Withdrawn Amount']} VND\n"
                )
                await update.message.reply_text(recipient_info_message)
                await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën chuy·ªÉn kho·∫£n:")
            else:
                await update.message.reply_text("‚ùå Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i.")
        except ValueError:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p m·ªôt ID ng∆∞·ªùi d√πng h·ª£p l·ªá.")
        finally:
            context.user_data['waiting_for_transfer'] = False
    elif 'recipient_user_id' in context.user_data:
        try:
            amount = float(update.message.text)
            if amount <= 0:
                await update.message.reply_text("S·ªë ti·ªÅn chuy·ªÉn kho·∫£n ph·∫£i l·ªõn h∆°n 0.")
                return
            
            await notify_admin(user_id, user_info, "chuy·ªÉn kho·∫£n", amount, user_chat_id, context)
        except ValueError:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.")

async def update_account_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('waiting_for_account_info'):
        update_type = context.user_data['update_type']
        new_value = update.message.text
        
        if update_type == 'update_account_number':
            bank_account_info['account_number'] = new_value
            await update.message.reply_text("‚úÖ S·ªë t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
        elif update_type == 'update_bank_name':
            bank_account_info['bank_name'] = new_value
            await update.message.reply_text("‚úÖ T√™n ng√¢n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
        elif update_type == 'update_phone_number':
            bank_account_info['phone_number'] = new_value
            await update.message.reply_text("‚úÖ S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")

        # L∆∞u d·ªØ li·ªáu t√†i kho·∫£n
        user_id = update.message.from_user.id
        save_user_data(user_id)
        
        context.user_data['waiting_for_account_info'] = False

# Th√™m h√†m x·ª≠ l√Ω l·ªói
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"ƒê√£ x·∫£y ra l·ªói: {context.error}")
    await context.bot.send_message(chat_id=admin_user_id, text=f"‚ùå M·ªôt l·ªói ƒë√£ x·∫£y ra trong bot: {str(context.error)}")

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
init_db()

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Telegram
application = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

# ƒêƒÉng k√Ω c√°c handler
application.add_handler(CommandHandler("start", start_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_handler))
application.add_handler(CallbackQueryHandler(approve_transaction_handler, pattern='approve_transaction'))
application.add_handler(CallbackQueryHandler(deny_transaction_handler, pattern='deny_transaction'))
application.add_handler(CallbackQueryHandler(update_income_handler, pattern='update_income'))
application.add_handler(CallbackQueryHandler(update_account_info_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, update_account_info))

# ƒêƒÉng k√Ω tr√¨nh x·ª≠ l√Ω l·ªói
application.add_error_handler(error_handler)

# Ch·∫°y bot
if __name__ == "__main__":
    application.run_polling()
